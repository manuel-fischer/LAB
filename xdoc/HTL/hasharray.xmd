@@file hasharray.t.h
@locate HTL/hasharray.t.h

Hasharray with linear forward probing.

Template header (multiple inclusion)

@param NAME               name of the generated type, prefix of all functions
@param KEY_TYPE           key type (`KeyType`)
@param ENTRY_TYPE         entry type (`EntryType`)
@param KEY_FUNC
	@syn KeyType KEY_FUNC(EntryType* e)
	@briefx key function, takes pointer to entry
	
@param HASH_FUNC
	@syn size_t HASH_FUNC(KeyType k)
	@briefx hash function, takes key, return `size_t`
	
@param COMP_FUNC
	@syn bool COMP_FUNC(KeyType k1, KeyType k2)
	@briefx comparison function, takes key, return 0 if equal

@param EMPTY_FUNC
	@syn bool EMPTY_FUNC(EntryType* e)
    @briefx Function to check if entry is empty.
	
	All bytes of the entry set to 0 should be an representation of an empty entry
    the function could check if a part of the entry is 0

@const HTL_HASHARRAY_LOAD_NUM          load factor numerator, its 3 (lesser than load denominator)
@const HTL_HASHARRAY_LOAD_DEN          load factor denominator, its 4
@const HTL_HASHARRAY_GROW_FACTOR       the grow factor, with which the array gets resized, its 2
@const HTL_HASHARRAY_INITIAL_CAPACITY  the initial capacity of the array, when the first element gets pushed, its 16
@const HTL_HASHARRAY_CACHE_LAST        0 or 1, used in `#if-#else` to enable fast cached check (NOT multithreading compatible), its 0

@class HashArray
	@config inline
	@attr capacity
		@syn size_t capacity
		@briefx The capacity of the currently allocated table
	
	@attr size
		@syn size_t size
		@briefx The number of elements in the hash array
		
	@attr table
		@syn EntryType* table
		@briefx The pointer to the buffer
	
	@attr cached_entry
		@syn EntryType* cached_entry
		@briefx The last requested entry
		@note Not thread safe

	@fn[lifetime] bool HashArray_Create(HashArray* hasharray)

		Create an empty hasharray at the referenced location
		
		@note Alternatively the bytes could be set to 0
		
		@return Always returns 1 for success
		@pre  hasharray was not already constructed
		@post the hasharray is valid to be used with the other functions
		@sidefx Clears the memory of the hash array with 0.
			
	@fn[lifetime] void HashArray_Destroy(HashArray* hasharray)
		Destroy a hasharray at the referenced location
		Dynamic memory gets cleaned up

		@post
			All references to entries get invalidated, because
			the array gets freed, `Construct` could be called
			again

	@fn[observers] EntryType* HashArray_Locate(HashArray* hasharray, KeyType key)
		Locate the element with the given key or where it should be
		
        @note You should use `Put` to insert elements
		
		@pre 
			The element is available in the array
		    or there is enough room for the new element
        
        @post Return value points to a valid memory location
        
	@fn[modifiers] EntryType* HashArray_PutAlloc(HashArray* hasharray, KeyType key)
		Create room for the entry with the given key, if it is not already present
		
		The return value points to NULL, when allocation failed.
		If it was already present, the return value points to that entry
		
		The entry itself is not inserted.
		To insert an entry, the caller should change the given entry to a
		representation, that is not an empty entry,
		When the entry was not inserted, the caller should call Discard
		
		@post
			All references to entries get invalidated, because the array
			might have been relocated
		
		@see HashArray_Discard

	@fn[observers] EntryType* HashArray_Get(HashArray* hasharray, KeyType key)
		Locate the element with the given key, if it is present.
		@return The element or `NULL` if it was not found
		
		@post The function does not change the array
 
	@fn[modifiers] void HashArray_RemoveEntry(HashArray* hasharray, EntryType* entry)
		Remove an entry by the given reference to the entry
		
		@pre  entry is a valid entry that is not an empty entry
		
		@post
			All references to entries get invalidated but keep dereferenceable,
			because some entries might get relocated but not reallocated
		
		@note
			This function can be used in a loop that iterates over all the
			entries linearly from [0] to [hasharray->capacity-1] in hasharray->table
			and removes elements conditionally. After this function has been called,
			the memory location of entry might contain another valid entry that needs
			to be tested. Then it is guaranteed that all elements are visited.

	@fn[modifiers] void HashArray_Remove(HashArray* hasharray, KeyType key)
		Remove the entry with the given key, if it is present
		
		@post
			All references to entries get invalidated but keep dereferenceable,
			because some entries might get relocated but not reallocated

	@fn[observers] bool HashArray_IsEntry(HashArray* hasharray, EntryType* entry)
		Function to check if an entry is empty
		
		@note this function could be used when iterating through hasharray->table

	@fn[modifiers] void HashArray_Discard(HashArray* hasharray, EntryType* entry)
		When an entry has been allocated, this function allows to do a fast
		return of the memory. This should only be called when the last call
		to the map was Put (or Put followed by one or more IsEntry calls)
		and the entry itself was kept empty, either not written to or changed
		to an empty representation. If the entry is kept fully 0, it is
		guaranteed that PutAlloc always returns entries that are fully 0,
		when no element was found
		
		@todo should locate/get be allowed in between?
		
		@see HashArray_PutAlloc
